$date
	Tue Apr 10 20:53:16 2018
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Mips_tb $end
$var reg 1 ! clk $end
$var reg 11 " i [10:0] $end
$var reg 1 # rst $end
$scope module U_mips $end
$var wire 1 ! clock $end
$var wire 1 $ pRegWrite $end
$var wire 1 # reset $end
$var wire 4 % pipeLock [3:0] $end
$var wire 4 & pipeClear [3:0] $end
$var wire 32 ' forward_alu_final_in_B [31:0] $end
$var wire 32 ( forward_alu_final_in_A [31:0] $end
$var wire 2 ) forwardB [1:0] $end
$var wire 2 * forwardA [1:0] $end
$var wire 1 + WB_last_memToReg $end
$var wire 32 , WB_last_memOut [31:0] $end
$var wire 32 - WB_last_aluOut [31:0] $end
$var wire 32 . WB_ID_writeBack [31:0] $end
$var wire 5 / WB_ID_gprWriteAddr [4:0] $end
$var wire 1 0 WB_ID_gprWrite $end
$var wire 1 1 M_last_zero $end
$var wire 1 2 M_last_regW $end
$var wire 1 3 M_last_pcSel $end
$var wire 1 4 M_last_memW $end
$var wire 1 5 M_last_memToR $end
$var wire 1 6 M_last_memR $end
$var wire 5 7 M_last_gprDes [4:0] $end
$var wire 32 8 M_last_gprB [31:0] $end
$var wire 32 9 M_last_aluResult [31:0] $end
$var wire 32 : M_dmResult_next [31:0] $end
$var wire 1 ; M_WB_lock $end
$var wire 1 < M_WB_clear $end
$var wire 1 = M_IF_doBranch $end
$var wire 32 > M_IF_BPC [31:0] $end
$var wire 32 ? IF_pc_return [31:0] $end
$var wire 32 @ IF_pc_im [31:0] $end
$var wire 32 A IF_ir_next [31:0] $end
$var wire 1 B IF_ID_lock $end
$var wire 1 C IF_ID_clear $end
$var wire 6 D ID_shamt_next [5:0] $end
$var wire 5 E ID_rt_gpr [4:0] $end
$var wire 5 F ID_rs_gpr [4:0] $end
$var wire 1 G ID_regDst_next $end
$var wire 5 H ID_rd_gpr [4:0] $end
$var wire 1 I ID_pcSel_next $end
$var wire 6 J ID_opcode_ctrl [5:0] $end
$var wire 1 K ID_memW_next $end
$var wire 1 L ID_memToR_next $end
$var wire 1 M ID_memR_next $end
$var wire 32 N ID_last_PC [31:0] $end
$var wire 32 O ID_last_IR [31:0] $end
$var wire 16 P ID_imm_ext [15:0] $end
$var wire 32 Q ID_gprB_next [31:0] $end
$var wire 32 R ID_gprA_next [31:0] $end
$var wire 6 S ID_funct_ctrl [5:0] $end
$var wire 2 T ID_extop_ext [1:0] $end
$var wire 32 U ID_extended_next [31:0] $end
$var wire 1 V ID_aluSrc_next $end
$var wire 5 W ID_aluCtrl_next [4:0] $end
$var wire 1 X ID_RegW_next $end
$var wire 1 Y ID_EX_lock $end
$var wire 1 Z ID_EX_clear $end
$var wire 5 [ EX_muxR_next [4:0] $end
$var wire 32 \ EX_muxB_alu [31:0] $end
$var wire 5 ] EX_last_rt_mux [4:0] $end
$var wire 5 ^ EX_last_rs_forward [4:0] $end
$var wire 1 _ EX_last_regW $end
$var wire 1 ` EX_last_regDst_muxR $end
$var wire 5 a EX_last_rd_mux [4:0] $end
$var wire 1 b EX_last_pcSel $end
$var wire 1 c EX_last_memW $end
$var wire 1 d EX_last_memToR $end
$var wire 1 e EX_last_memR $end
$var wire 32 f EX_last_gprB_muxB [31:0] $end
$var wire 32 g EX_last_gprA_alu [31:0] $end
$var wire 32 h EX_last_ext [31:0] $end
$var wire 1 i EX_last_aluSrc_muxB $end
$var wire 32 j EX_last_PC [31:0] $end
$var wire 32 k EX_branchAddr_next [31:0] $end
$var wire 1 l EX_aluZero_next $end
$var wire 32 m EX_aluResult_next [31:0] $end
$var wire 5 n EX_aluCtrl_alu [4:0] $end
$var wire 1 o EX_M_lock $end
$var wire 1 p EX_M_clear $end
$scope module ALU $end
$var wire 32 q DataIn1 [31:0] $end
$var wire 32 r DataIn2 [31:0] $end
$var wire 5 s AluCtrl [4:0] $end
$var reg 32 t AluResult [31:0] $end
$var reg 1 l Zero $end
$var reg 32 u temp [31:0] $end
$upscope $end
$scope module DMEM $end
$var wire 5 v DataAdr [4:0] $end
$var wire 32 w DataOut [31:0] $end
$var wire 1 ! clk $end
$var wire 32 x DataIn [31:0] $end
$var wire 1 4 DMemW $end
$var wire 1 6 DMemR $end
$upscope $end
$scope module ELOHIM $end
$var wire 6 y OpCode [5:0] $end
$var wire 6 z funct [5:0] $end
$var reg 1 { AluShift $end
$var reg 5 | Aluctrl [4:0] $end
$var reg 1 V Alusrc $end
$var reg 1 I Branch $end
$var reg 2 } ExtOp [1:0] $end
$var reg 1 L Mem2R $end
$var reg 1 M MemR $end
$var reg 1 K MemW $end
$var reg 1 ~ NBranch $end
$var reg 1 G RegDst $end
$var reg 1 X RegW $end
$var reg 1 !" jump $end
$upscope $end
$scope module EXT $end
$var wire 16 "" DataIn [15:0] $end
$var wire 2 #" ExtOp [1:0] $end
$var reg 32 $" ExtOut [31:0] $end
$upscope $end
$scope module FORWARD $end
$var wire 2 %" forwardB [1:0] $end
$var wire 2 &" forwardA [1:0] $end
$var wire 5 '" ID_EX_rt [4:0] $end
$var wire 5 (" ID_EX_rs [4:0] $end
$var wire 1 2 EX_M_regWrite $end
$var wire 5 )" EX_M_rd [4:0] $end
$upscope $end
$scope module PC_UNIT $end
$var wire 1 ! Clk $end
$var wire 1 # PcReSet $end
$var wire 1 = PcSel $end
$var wire 32 *" nextPC [31:0] $end
$var wire 32 +" branchAddr [31:0] $end
$var reg 32 ," PC [31:0] $end
$var reg 32 -" realBranchAddr [31:0] $end
$upscope $end
$scope module PIP_CTRL $end
$var wire 1 = branch $end
$var wire 1 ! clock $end
$var wire 4 ." pipeline_lock [3:0] $end
$var wire 4 /" pipeline_clear [3:0] $end
$upscope $end
$scope module P_EXMEM $end
$var wire 32 0" BPC_in [31:0] $end
$var wire 1 1" Write $end
$var wire 32 2" aluOut_in [31:0] $end
$var wire 1 ! clk $end
$var wire 5 3" gprDes_in [4:0] $end
$var wire 1 4" rst $end
$var wire 1 l zero_in $end
$var wire 1 _ regW_in $end
$var wire 1 b pcSel_in $end
$var wire 1 c memW_in $end
$var wire 1 d memToR_in $end
$var wire 1 e memR_in $end
$var wire 32 5" gprB_in [31:0] $end
$var reg 32 6" BPC_mid [31:0] $end
$var reg 32 7" BPC_out [31:0] $end
$var reg 32 8" aluOut_mid [31:0] $end
$var reg 32 9" aluOut_out [31:0] $end
$var reg 32 :" gprB_mid [31:0] $end
$var reg 32 ;" gprB_out [31:0] $end
$var reg 5 <" gprDes_mid [4:0] $end
$var reg 5 =" gprDes_out [4:0] $end
$var reg 1 >" memR_mid $end
$var reg 1 6 memR_out $end
$var reg 1 ?" memToR_mid $end
$var reg 1 5 memToR_out $end
$var reg 1 @" memW_mid $end
$var reg 1 4 memW_out $end
$var reg 1 A" pcSel_mid $end
$var reg 1 3 pcSel_out $end
$var reg 1 B" regW_mid $end
$var reg 1 2 regW_out $end
$var reg 1 C" zero_mid $end
$var reg 1 1 zero_out $end
$upscope $end
$scope module P_GPR $end
$var wire 5 D" ReSel1 [4:0] $end
$var wire 5 E" ReSel2 [4:0] $end
$var wire 32 F" WData [31:0] $end
$var wire 1 ! clk $end
$var wire 5 G" WeSel [4:0] $end
$var wire 1 0 WE $end
$var wire 32 H" DataOut2 [31:0] $end
$var wire 32 I" DataOut1 [31:0] $end
$upscope $end
$scope module P_IDEX $end
$var wire 5 J" ALUop_in [4:0] $end
$var wire 1 V ALUsrc_in $end
$var wire 1 I Branch_in $end
$var wire 1 M Mread_in $end
$var wire 1 L MtoR_in $end
$var wire 1 K Mwrite_in $end
$var wire 1 G RegDst_in $end
$var wire 1 X RegWrite_in $end
$var wire 1 K" Write $end
$var wire 1 ! clk $end
$var wire 32 L" ext_in [31:0] $end
$var wire 32 M" gprA_in [31:0] $end
$var wire 32 N" gprB_in [31:0] $end
$var wire 5 O" rd_in [4:0] $end
$var wire 5 P" rs_in [4:0] $end
$var wire 1 Q" rst $end
$var wire 5 R" rt_in [4:0] $end
$var wire 32 S" PC_in [31:0] $end
$var reg 5 T" ALUop_mid [4:0] $end
$var reg 5 U" ALUop_out [4:0] $end
$var reg 1 V" ALUsrc_mid $end
$var reg 1 i ALUsrc_out $end
$var reg 1 W" Branch_mid $end
$var reg 1 b Branch_out $end
$var reg 1 X" Mread_mid $end
$var reg 1 e Mread_out $end
$var reg 1 Y" MtoR_mid $end
$var reg 1 d MtoR_out $end
$var reg 1 Z" Mwrite_mid $end
$var reg 1 c Mwrite_out $end
$var reg 32 [" PC_mid [31:0] $end
$var reg 32 \" PC_out [31:0] $end
$var reg 1 ]" RegDst_mid $end
$var reg 1 ` RegDst_out $end
$var reg 1 ^" RegWrite_mid $end
$var reg 1 _ RegWrite_out $end
$var reg 32 _" ext_mid [31:0] $end
$var reg 32 `" ext_out [31:0] $end
$var reg 32 a" gprA_mid [31:0] $end
$var reg 32 b" gprA_out [31:0] $end
$var reg 32 c" gprB_mid [31:0] $end
$var reg 32 d" gprB_out [31:0] $end
$var reg 5 e" rd_mid [4:0] $end
$var reg 5 f" rd_out [4:0] $end
$var reg 5 g" rs_mid [4:0] $end
$var reg 5 h" rs_out [4:0] $end
$var reg 5 i" rt_mid [4:0] $end
$var reg 5 j" rt_out [4:0] $end
$upscope $end
$scope module P_IFID $end
$var wire 32 k" PC_in [31:0] $end
$var wire 1 l" Write $end
$var wire 1 ! clk $end
$var wire 1 m" rst $end
$var wire 32 n" IR_in [31:0] $end
$var reg 32 o" IR_mid [31:0] $end
$var reg 32 p" IR_out [31:0] $end
$var reg 32 q" PC_mid [31:0] $end
$var reg 32 r" PC_out [31:0] $end
$upscope $end
$scope module P_IM $end
$var wire 5 s" ImAdress [4:0] $end
$var wire 32 t" OpCode [31:0] $end
$var reg 32 u" Opcode [31:0] $end
$upscope $end
$scope module P_MEMWB $end
$var wire 1 v" Write $end
$var wire 32 w" aluOut_in [31:0] $end
$var wire 1 ! clk $end
$var wire 5 x" gprDes_in [4:0] $end
$var wire 32 y" memOut_in [31:0] $end
$var wire 1 5 memToR_in $end
$var wire 1 2 regW_in $end
$var wire 1 z" rst $end
$var reg 32 {" aluOut_mid [31:0] $end
$var reg 32 |" aluOut_out [31:0] $end
$var reg 5 }" gprDes_mid [4:0] $end
$var reg 5 ~" gprDes_out [4:0] $end
$var reg 32 !# memOut_mid [31:0] $end
$var reg 32 "# memOut_out [31:0] $end
$var reg 1 ## memToR_mid $end
$var reg 1 + memToR_out $end
$var reg 1 $# regW_mid $end
$var reg 1 0 regW_out $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux16 $end
$var wire 8 %# d0 [7:0] $end
$var wire 8 &# d1 [7:0] $end
$var wire 8 '# d10 [7:0] $end
$var wire 8 (# d11 [7:0] $end
$var wire 8 )# d12 [7:0] $end
$var wire 8 *# d13 [7:0] $end
$var wire 8 +# d14 [7:0] $end
$var wire 8 ,# d15 [7:0] $end
$var wire 8 -# d2 [7:0] $end
$var wire 8 .# d3 [7:0] $end
$var wire 8 /# d4 [7:0] $end
$var wire 8 0# d5 [7:0] $end
$var wire 8 1# d6 [7:0] $end
$var wire 8 2# d7 [7:0] $end
$var wire 8 3# d8 [7:0] $end
$var wire 8 4# d9 [7:0] $end
$var wire 4 5# s [3:0] $end
$var wire 8 6# y [7:0] $end
$var reg 8 7# y_r [7:0] $end
$upscope $end
$scope module mux2 $end
$var wire 8 8# d0 [7:0] $end
$var wire 8 9# d1 [7:0] $end
$var wire 1 :# s $end
$var wire 8 ;# y [7:0] $end
$upscope $end
$scope module mux4 $end
$var wire 8 <# d0 [7:0] $end
$var wire 8 =# d1 [7:0] $end
$var wire 8 ># d2 [7:0] $end
$var wire 8 ?# d3 [7:0] $end
$var wire 2 @# s [1:0] $end
$var wire 8 A# y [7:0] $end
$var reg 8 B# y_r [7:0] $end
$upscope $end
$scope module mux8 $end
$var wire 8 C# d0 [7:0] $end
$var wire 8 D# d1 [7:0] $end
$var wire 8 E# d2 [7:0] $end
$var wire 8 F# d3 [7:0] $end
$var wire 8 G# d4 [7:0] $end
$var wire 8 H# d5 [7:0] $end
$var wire 8 I# d6 [7:0] $end
$var wire 8 J# d7 [7:0] $end
$var wire 3 K# s [2:0] $end
$var wire 8 L# y [7:0] $end
$var reg 8 M# y_r [7:0] $end
$upscope $end
$enddefinitions $end
#250
$dumpvars
bx M#
bx L#
bz K#
bz J#
bz I#
bz H#
bz G#
bz F#
bz E#
bz D#
bz C#
bx B#
bx A#
bz @#
bz ?#
bz >#
bz =#
bz <#
bz ;#
z:#
bz 9#
bz 8#
bx 7#
bx 6#
bz 5#
bz 4#
bz 3#
bz 2#
bz 1#
bz 0#
bz /#
bz .#
bz -#
bz ,#
bz +#
bz *#
bz )#
bz (#
bz '#
bz &#
bz %#
0$#
0##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
0z"
bx y"
b0 x"
b0 w"
1v"
b110100000000011111111111111111 u"
b110100000000011111111111111111 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b110100000000011111111111111111 n"
0m"
1l"
b11000000000100 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
0^"
0]"
b0 \"
b0 ["
0Z"
0Y"
0X"
0W"
0V"
b0 U"
b0 T"
b0 S"
b0 R"
0Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
1K"
b10001 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
0C"
0B"
0A"
0@"
0?"
0>"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
04"
b0 3"
b0 2"
11"
b0 0"
b0 /"
b1111 ."
bx -"
b11000000000000 ,"
b0 +"
b11000000000100 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
0!"
0~
b0 }
b10001 |
1{
b0 z
b0 y
b0 x
bx w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
0p
1o
b0 n
b0 m
1l
b0 k
b0 j
0i
b0 h
b0 g
b0 f
0e
0d
0c
0b
b0 a
0`
0_
b0 ^
b0 ]
b0 \
b0 [
0Z
1Y
1X
b10001 W
0V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
0M
0L
0K
b0 J
0I
b0 H
0G
b0 F
b0 E
b0 D
0C
1B
b110100000000011111111111111111 A
b11000000000000 @
b11000000000100 ?
b0 >
0=
0<
1;
bx :
b0 9
b0 8
b0 7
06
05
04
03
02
01
00
b0 /
b0 .
b0 -
b0 ,
0+
b0 *
b0 )
b0 (
b0 '
b0 &
b1111 %
1$
0#
b10100 "
1!
$end
#500
b0 -"
b110100000000011111111111111111 o"
b11000000000100 q"
1^"
b10001 T"
1C"
bx !#
0!
#1000
bx ,
bx "#
bx Q
bx H"
bx N"
b110100001000101111000000001111 A
b110100001000101111000000001111 n"
b110100001000101111000000001111 t"
b110100001000101111000000001111 u"
b1111111111111111 U
b1111111111111111 $"
b1111111111111111 L"
b110 W
b110 |
b110 J"
0{
1V
1G
b1 s"
b1111111111111111 P
b1111111111111111 ""
b11111 H
b11111 O"
b1 E
b1 E"
b1 R"
b111111 S
b111111 z
b11111 D
b1101 J
b1101 y
b11000000001000 ?
b11000000001000 *"
b11000000001000 k"
b11000000000100 @
b11000000000100 ,"
11
1_
b10001 n
b10001 s
b10001 U"
b110100000000011111111111111111 O
b110100000000011111111111111111 p"
b11000000000100 N
b11000000000100 S"
b11000000000100 r"
1!
#1500
1B"
b1111111111111111 _"
1V"
b110 T"
1]"
bx c"
b1 i"
b11111 e"
b11000000000100 ["
b110100001000101111000000001111 o"
b11000000001000 q"
0!
#2000
0l
b1111111111111111 m
b1111111111111111 t
b1111111111111111 2"
bx R
bx I"
bx M"
b0 A
b0 n"
b0 t"
b0 u"
b1111111111111111 '
b1111111111111111 r
b1111000000001111 U
b1111000000001111 $"
b1111000000001111 L"
b10 s"
b1111111111111111 \
b1 [
b1 3"
b1111000000001111 P
b1111000000001111 ""
b11110 H
b11110 O"
b10 E
b10 E"
b10 R"
b1 F
b1 D"
b1 P"
b1111 S
b1111 z
b0 D
b11000000001100 ?
b11000000001100 *"
b11000000001100 k"
b11000000001000 @
b11000000001000 ,"
12
b1111111111111111 h
b1111111111111111 `"
1i
b110 n
b110 s
b110 U"
1`
bx f
bx 5"
bx d"
b1 ]
b1 '"
b1 j"
b11111 a
b11111 f"
b1000011000000000000 k
b1000011000000000000 0"
b11000000000100 j
b11000000000100 \"
b110100001000101111000000001111 O
b110100001000101111000000001111 p"
b11000000001000 N
b11000000001000 S"
b11000000001000 r"
1!
#2500
b0 o"
b11000000001100 q"
b1111000000001111 _"
bx a"
b1 g"
b10 i"
b11110 e"
b11000000001000 ["
0C"
bx :"
b1111111111111111 8"
b1 <"
b1000011000000000000 6"
1$#
0!
#3000
10
b10 *
b10 &"
b0 Q
b0 H"
b0 N"
b0 R
b0 I"
b0 M"
b1111000000001111 '
b1111000000001111 r
b1111111111111111 m
b1111111111111111 t
b1111111111111111 2"
b0 U
b0 $"
b0 L"
b10001 W
b10001 |
b10001 J"
1{
0V
0G
b11 s"
b11111 v
b1111000000001111 \
b1111111111111111 (
b1111111111111111 q
b10 [
b10 3"
b0 P
b0 ""
b0 H
b0 O"
b0 E
b0 E"
b0 R"
b0 F
b0 D"
b0 P"
b0 S
b0 z
b0 J
b0 y
b11000000010000 ?
b11000000010000 *"
b11000000010000 k"
b11000000001100 @
b11000000001100 ,"
01
bx 8
bx x
bx ;"
b1111111111111111 9
b1111111111111111 9"
b1111111111111111 w"
b1 7
b1 )"
b1 ="
b1 x"
b1000011000000000000 >
b1000011000000000000 +"
b1000011000000000000 7"
b1111000000001111 h
b1111000000001111 `"
bx g
bx b"
b1 ^
b1 ("
b1 h"
b10 ]
b10 '"
b10 j"
b11110 a
b11110 f"
b111111000001000100 k
b111111000001000100 0"
b11000000001000 j
b11000000001000 \"
b0 O
b0 p"
b11000000001100 N
b11000000001100 S"
b11000000001100 r"
1!
#3500
b1111111111111111 {"
b1 }"
b10 <"
b111111000001000100 6"
b0 _"
0V"
b10001 T"
0]"
b0 c"
b0 a"
b0 g"
b0 i"
b0 e"
b11000000001100 ["
b11000000010000 q"
b1000011000000000000 -"
0!
#4000
b1111111111111111 .
b1111111111111111 F"
b1111111111111111 -
b1111111111111111 |"
b1 /
b1 G"
b1 ~"
b0 (
b0 q
b0 '
b0 r
b0 *
b0 &"
b100 s"
b0 \
1l
b0 m
b0 t
b0 2"
b0 [
b0 3"
b11000000010100 ?
b11000000010100 *"
b11000000010100 k"
b11000000010000 @
b11000000010000 ,"
b10 7
b10 )"
b10 ="
b10 x"
b111111000001000100 >
b111111000001000100 +"
b111111000001000100 7"
b0 h
b0 `"
0i
b10001 n
b10001 s
b10001 U"
0`
b0 f
b0 5"
b0 d"
b0 g
b0 b"
b0 ^
b0 ("
b0 h"
b0 ]
b0 '"
b0 j"
b0 a
b0 f"
b11000000001100 k
b11000000001100 0"
b11000000001100 j
b11000000001100 \"
b11000000010000 N
b11000000010000 S"
b11000000010000 r"
1!
#4500
b111111000001000100 -"
b11000000010100 q"
b11000000010000 ["
1C"
b0 :"
b0 8"
b0 <"
b11000000001100 6"
b10 }"
0!
#5000
b10 /
b10 G"
b10 ~"
b101 s"
b0 v
b11000000011000 ?
b11000000011000 *"
b11000000011000 k"
b11000000010100 @
b11000000010100 ,"
11
b0 8
b0 x
b0 ;"
b0 9
b0 9"
b0 w"
b0 7
b0 )"
b0 ="
b0 x"
b11000000001100 >
b11000000001100 +"
b11000000001100 7"
b11000000010000 k
b11000000010000 0"
b11000000010000 j
b11000000010000 \"
b11000000010100 N
b11000000010100 S"
b11000000010100 r"
1!
#5500
b0 {"
b0 }"
b11000000010000 6"
b11000000010100 ["
b11000000011000 q"
b11000000001100 -"
0!
#6000
b0 .
b0 F"
b0 -
b0 |"
b0 /
b0 G"
b0 ~"
b110 s"
b11000000011100 ?
b11000000011100 *"
b11000000011100 k"
b11000000011000 @
b11000000011000 ,"
b11000000010000 >
b11000000010000 +"
b11000000010000 7"
b11000000010100 k
b11000000010100 0"
b11000000010100 j
b11000000010100 \"
b11000000011000 N
b11000000011000 S"
b11000000011000 r"
1!
#6500
b11000000010000 -"
b11000000011100 q"
b11000000011000 ["
b11000000010100 6"
0!
#7000
b1101 A
b1101 n"
b1101 t"
b1101 u"
b111 s"
b11000000100000 ?
b11000000100000 *"
b11000000100000 k"
b11000000011100 @
b11000000011100 ,"
b11000000010100 >
b11000000010100 +"
b11000000010100 7"
b11000000011000 k
b11000000011000 0"
b11000000011000 j
b11000000011000 \"
b11000000011100 N
b11000000011100 S"
b11000000011100 r"
1!
#7500
b11000000011000 6"
b11000000011100 ["
b1101 o"
b11000000100000 q"
b11000000010100 -"
0!
#8000
bx A
bx n"
bx t"
bx u"
b1101 U
b1101 $"
b1101 L"
0{
b1000 s"
b1101 P
b1101 ""
b1101 S
b1101 z
b11000000100100 ?
b11000000100100 *"
b11000000100100 k"
b11000000100000 @
b11000000100000 ,"
b11000000011000 >
b11000000011000 +"
b11000000011000 7"
b11000000011100 k
b11000000011100 0"
b11000000011100 j
b11000000011100 \"
b1101 O
b1101 p"
b11000000100000 N
b11000000100000 S"
b11000000100000 r"
1!
